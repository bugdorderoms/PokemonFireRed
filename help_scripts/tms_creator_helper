import os

# This script generates the files gen_X on src/data/item/tms folder,
# based on the include/constants/tms.h file

# Go to project's root
file_path = os.path.dirname(os.path.realpath(__file__))
requiredPath = "\\help_scripts"

if not file_path.endswith(requiredPath):
    print(f"Please run this script from {file_path}{requiredPath}")
    quit()
else:
    file_path = file_path.removesuffix(requiredPath)

# Start of code

# Create each gen_X file

tms = []
choosen_gen_tms = []

choosen_gen = "none"

def CreateGenFile(gen):
    output = open(f"{file_path}/src/data/item/tms/{gen.lower()}.h", 'w')
    output.write(f"// DO NOT MODIFY THIS FILE. IT IS AUTO GENERATED BY tms_creator_helper.py\n\n#ifdef __INTELLISENSE__\nconst struct Item gTmsInfo_{gen.capitalize()}[] =\n{chr(123)}\n#endif\n")
    output.writelines(tms)
    output.write(f"\n#ifdef __INTELLISENSE__\n{chr(125)};\n#endif\n")
    output.close()

    if gen == choosen_gen:
        choosen_gen_tms = tms

    tms.clear()

config_file = open(f"{file_path}/inserts.h", 'r')

with open(f"{file_path}/include/constants/tms.h", 'r') as file:
    gen = "none"

    for line in file:
        line = line.strip()

        if "NUM_TECHNICAL_MACHINES" in line:
            if gen != "none":
                CreateGenFile(gen)

        elif "TMS_GEN" in line:
            gen = line.split(" ")[3]

            if f"#define TMS_GEN {gen}" in config_file:
                choosen_gen = gen

        elif line.startswith("#define ITEM_"):
            tm = line.split(" ")[1].strip()
            num = tm.split("_")[1]
            move = tm.removeprefix(f"ITEM_{num}_")
            tms.append(f"\n\t[{tm}] =\n\t{chr(123)}\n\t\t.name = _({chr(34)}{num}{chr(34)}),\n\t\t.holdEffectParam = MOVE_{move},"
                       f"\n\t\t.description = (u8*)&gBattleMoves[MOVE_{move}].description,\n\t\t.price = 3000,\n\t\t.pocket = POCKET_TM_CASE,"
                       f"\n\t\t.type = ITEM_TYPE_PARTY_MENU,\n\t{chr(125)},\n")

config_file.close()

print("End!")